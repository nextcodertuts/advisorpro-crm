generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PREMIUM
  PENDING
}

enum Role {
  OWNER
  AGENT
  VIEWER
}

enum Channel {
  email
  whatsapp
}

enum PolicyStatus {
  ACTIVE
  LAPSED
  MATURED
  SURRENDERED
}

enum PaymentMethod {
  RAZORPAY
  MANUAL
  CASHFREE
  PAYU
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}


enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}


enum TaskType {
  FOLLOW_UP
  POLICY_RENEWAL
  CLAIM_ASSISTANCE
  DOCUMENTATION
  MEETING
  OTHER
}

enum ScheduleStatus {
  PENDING
  PAID
  PARTIAL
  OVERDUE
  CANCELLED
}

enum PaymentMode {
  CASH
  CHEQUE
  ONLINE_TRANSFER
  UPI
  DEBIT_CARD
  CREDIT_CARD
  NET_BANKING
  OTHER
}

enum ReminderType {
  ADVANCE_30
  ADVANCE_15
  ADVANCE_7
  DUE_DATE
  OVERDUE_7
  OVERDUE_15
  OVERDUE_30
}

model User {
  id           String   @id @default(uuid())
  name         String?
  email        String   @unique
  phone        String   @unique
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")

  memberships  Membership[]
  workspaces   Workspace[] @relation("WorkspaceOwner")
  clientsAssigned Client[]   @relation("UserAssignedClients")
  auditLogs       AuditLog[] @relation("UserAuditLogs")
  refreshTokens RefreshToken[]
  createdTasks    Task[]     @relation("TaskCreator")
  assignedTasks   Task[]     @relation("TaskAssignee")
  processedPayments PremiumPayment[] @relation("ProcessedPayments")
  calculatedPremiums PremiumCalculation[] @relation("CalculatedPremiums")
  userLocations   UserLocation[]
  uploadedAssets  WorkspaceAsset[] @relation("UploadedAssets")

  @@map("users")
}

model Workspace {
  id            String        @id @default(uuid())
  name          String
  ownerId       String        @map("owner_id")
  owner         User          @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  plan          Plan          @default(FREE)
  paymentMethod PaymentMethod? @map("payment_method")
  paymentRef    String?        @map("payment_ref")
  createdAt     DateTime       @default(now()) @map("created_at")
  resendApiKeyEnc String?      @map("resend_api_key_enc")
  resendFromEmail String?      @map("resend_from_email")
  resendFromName  String?      @map("resend_from_name")
  officeLatitude  Decimal?     @map("office_latitude") @db.Decimal(10, 8)
  officeLongitude Decimal?     @map("office_longitude") @db.Decimal(11, 8)
  officeAddress   String?      @map("office_address")
  locationTrackingEnabled Boolean @default(false) @map("location_tracking_enabled")
  officeEmail     String?      @map("office_email")
  officePhone     String?      @map("office_phone")
  officeAddressFull String?    @map("office_address_full")
  logoUrl         String?      @map("logo_url")
  websiteUrl      String?      @map("website_url")
  businessRegistration String? @map("business_registration")
  gstNumber       String?      @map("gst_number")
  panNumber       String?      @map("pan_number")
  cloudinaryCloudNameEnc String? @map("cloudinary_cloud_name_enc")
  cloudinaryApiKeyEnc String?  @map("cloudinary_api_key_enc")
  cloudinaryApiSecretEnc String? @map("cloudinary_api_secret_enc")

  memberships   Membership[]
  clients       Client[]
  clientGroups  ClientGroup[]
  templates     ReminderTemplate[]
  reminderLogs  ReminderLog[]
  auditLogs     AuditLog[]
  billingLogs   BillingLog[]
  tasks         Task[]
  premiumPayments PremiumPayment[]
  premiumReminders PremiumReminder[]
  userLocations UserLocation[]
  workspaceAssets WorkspaceAsset[]

  @@index([ownerId])
  @@map("workspaces")
}

model Membership {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  workspaceId String    @map("workspace_id")
  role        Role

  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
  @@index([workspaceId])
  @@map("memberships")
}

model Client {
  id                 String    @id @default(uuid())
  workspaceId        String    @map("workspace_id")
  assignedToUserId   String?   @map("assigned_to_user_id")
  clientGroupId      String?   @map("client_group_id")
  name               String
  dob                DateTime?
  mobile             String?
  panNo              String?
  aadhaarNo          String?
  email              String?
  address            String?
  tags               String[]
  relationshipToHead String?   @map("relationship_to_head")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt      @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")

  workspace          Workspace @relation(fields: [workspaceId], references: [id])
  assignedToUser     User?    @relation("UserAssignedClients", fields: [assignedToUserId], references: [id])
  clientGroup        ClientGroup? @relation(fields: [clientGroupId], references: [id])
  policies           Policy[]
  reminderLogs       ReminderLog[]
  tasks              Task[]

  @@index([workspaceId])
  @@index([deletedAt])
  @@index([clientGroupId])
  @@map("clients")
}

model ClientGroup {
  id          String   @id @default(uuid())
  workspaceId String   @map("workspace_id")
  name        String   // Family name like "Smith Family"
  description String?  // Optional description
  headClientId String? @map("head_client_id") // Primary family member
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  clients     Client[]  // All family members

  @@index([workspaceId])
  @@index([deletedAt])
  @@map("client_groups")
}

model Policy {
  id            String       @id @default(uuid())
  clientId      String       @map("client_id")
  insurer       String
  planName      String?      @map("plan_name")
  policyNumber  String       @unique @map("policy_number")
  sumAssured    Decimal?     @map("sum_assured")
  premiumAmount Decimal?     @map("premium_amount")
  premiumMode   String?      @map("premium_mode")
  commencementDate DateTime? @map("commencement_date")
  nextDueDate   DateTime?    @map("next_due_date")
  lastPaidDate  DateTime?    @map("last_paid_date")
  maturityDate  DateTime?    @map("maturity_date")
  status        PolicyStatus @default(ACTIVE)
  metadata      Json?        // Store additional policy details like riders, nominee, etc.
  policyType    String?      @map("policy_type")
  annualPremium Decimal?     @map("annual_premium")
  premiumPayingTerm Int?     @map("premium_paying_term")
  policyTerm    Int?         @map("policy_term")
  nomineeDetails String?     @map("nominee_details")
  agentCode     String?      @map("agent_code")
  branchCode    String?      @map("branch_code")
  servicingDetails String?   @map("servicing_details")
  proposalNumber String?     @map("proposal_number")
  medicalRequired Boolean?   @map("medical_required") @default(false)
  policyBondNumber String?   @map("policy_bond_number")
  revivalDate   DateTime?    @map("revival_date")
  surrenderValue Decimal?    @map("surrender_value")
  loanAvailable Boolean?     @map("loan_available") @default(false)
  loanAmount    Decimal?     @map("loan_amount")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt      @map("updated_at")

  client        Client       @relation(fields: [clientId], references: [id])
  reminderLogs  ReminderLog[]
  tasks         Task[]
  premiumSchedules PremiumSchedule[]
  premiumPayments PremiumPayment[]
  premiumReminders PremiumReminder[]
  policyRiders  PolicyRider[]
  premiumCalculations PremiumCalculation[]

  @@index([clientId])
  @@index([nextDueDate])
  @@index([commencementDate])
  @@index([maturityDate])
  @@map("policies")
}

model ReminderTemplate {
  id           String   @id @default(uuid())
  workspaceId  String   @map("workspace_id")
  name         String
  channel      Channel
  subject      String?
  body         String
  variables    String[]
  createdAt    DateTime @default(now()) @map("created_at")

  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  reminderLogs ReminderLog[]
  premiumReminders PremiumReminder[]

  @@index([workspaceId])
  @@map("reminder_templates")
}

model ReminderLog {
  id          String    @id @default(uuid())
  workspaceId String    @map("workspace_id")
  clientId    String?   @map("client_id")
  policyId    String?   @map("policy_id")
  templateId  String?   @map("template_id")
  channel     Channel
  to          String    @map("to")
  status      String
  error       String?
  sentAt      DateTime  @default(now()) @map("sent_at")

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  client      Client?   @relation(fields: [clientId], references: [id])
  policy      Policy?   @relation(fields: [policyId], references: [id])
  template    ReminderTemplate? @relation(fields: [templateId], references: [id])

  @@index([workspaceId])
  @@index([clientId])
  @@index([policyId])
  @@map("reminder_logs")
}

model AuditLog {
  id          String    @id @default(uuid())
  workspaceId String    @map("workspace_id")
  userId      String?   @map("user_id")
  action      String
  entity      String
  entityId    String?   @map("entity_id")
  diffJson    Json?     @map("diff_json")
  createdAt   DateTime  @default(now()) @map("created_at")

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  user        User?     @relation("UserAuditLogs", fields: [userId], references: [id])

  @@index([workspaceId])
  @@index([userId])
  @@map("audit_logs")
}

model BillingLog {
  id               String        @id @default(uuid())
  workspaceId      String        @map("workspace_id")
  planBefore       Plan          @map("plan_before")
  planAfter        Plan          @map("plan_after")
  paymentMethod    PaymentMethod @map("payment_method")
  paymentRef       String?       @map("payment_ref")
  verifiedByAdmin  Boolean?      @map("verified_by_admin")
  createdAt        DateTime      @default(now()) @map("created_at")

  workspace        Workspace     @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
  @@map("billing_logs")
}

model RefreshToken {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  tokenHash  String   @map("token_hash")
  expiresAt  DateTime @map("expires_at")
  revokedAt  DateTime? @map("revoked_at")
  createdAt  DateTime @default(now()) @map("created_at")

  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("refresh_tokens")
}

model Task {
  id                  String       @id @default(uuid())
  workspaceId         String       @map("workspace_id")
  title               String
  description         String?
  priority            TaskPriority @default(MEDIUM)
  status              TaskStatus   @default(PENDING)
  type                TaskType     @default(OTHER)
  createdByUserId     String       @map("created_by_user_id")
  assignedToUserId    String?      @map("assigned_to_user_id")
  clientId            String?      @map("client_id")
  policyId            String?      @map("policy_id")
  dueDate             DateTime?    @map("due_date")
  completedAt         DateTime?    @map("completed_at")
  completionRemarks   String?      @map("completion_remarks")
  completionData      Json?        @map("completion_data")
  createdAt           DateTime     @default(now()) @map("created_at")
  updatedAt           DateTime     @updatedAt      @map("updated_at")

  workspace           Workspace    @relation(fields: [workspaceId], references: [id])
  createdBy           User         @relation("TaskCreator", fields: [createdByUserId], references: [id])
  assignedTo          User?        @relation("TaskAssignee", fields: [assignedToUserId], references: [id])
  client              Client?      @relation(fields: [clientId], references: [id])
  policy              Policy?      @relation(fields: [policyId], references: [id])

  @@index([workspaceId])
  @@index([assignedToUserId])
  @@index([createdByUserId])
  @@index([clientId])
  @@index([policyId])
  @@index([status])
  @@index([dueDate])
  @@index([priority])
  @@map("tasks")
}

model PremiumSchedule {
  id               String    @id @default(uuid())
  policyId         String    @map("policy_id")
  installmentNumber Int      @map("installment_number")
  dueDate          DateTime  @map("due_date")
  premiumAmount    Decimal   @map("premium_amount")
  gracePeriodEnd   DateTime? @map("grace_period_end")
  status           String    @default("PENDING") // PENDING, PAID, OVERDUE, WAIVED
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  policy           Policy    @relation(fields: [policyId], references: [id], onDelete: Cascade)
  payments         PremiumPayment[]
  reminders        PremiumReminder[]

  @@index([policyId])
  @@index([dueDate])
  @@index([status])
  @@map("premium_schedules")
}

model PremiumPayment {
  id               String    @id @default(uuid())
  workspaceId      String    @map("workspace_id")
  policyId         String    @map("policy_id")
  scheduleId       String?   @map("schedule_id")
  paymentDate      DateTime  @map("payment_date")
  amountPaid       Decimal   @map("amount_paid")
  paymentMode      String    @map("payment_mode") // CASH, CHEQUE, ONLINE, UPI, etc.
  receiptNumber    String?   @map("receipt_number")
  chequeNumber     String?   @map("cheque_number")
  bankName         String?   @map("bank_name")
  transactionId    String?   @map("transaction_id")
  lateFee          Decimal?  @map("late_fee") @default(0)
  discount         Decimal?  @map("discount") @default(0)
  remarks          String?
  processedByUserId String?  @map("processed_by_user_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  policy           Policy    @relation(fields: [policyId], references: [id], onDelete: Cascade)
  schedule         PremiumSchedule? @relation(fields: [scheduleId], references: [id])
  processedBy      User?     @relation("ProcessedPayments", fields: [processedByUserId], references: [id])

  @@index([workspaceId])
  @@index([policyId])
  @@index([paymentDate])
  @@map("premium_payments")
}

model PremiumReminder {
  id               String    @id @default(uuid())
  workspaceId      String    @map("workspace_id")
  policyId         String    @map("policy_id")
  scheduleId       String    @map("schedule_id")
  reminderDate     DateTime  @map("reminder_date")
  reminderType     ReminderType
  daysBeforeDue    Int?      @map("days_before_due")
  channel          Channel
  templateId       String?   @map("template_id")
  status           String    @default("SCHEDULED") // SCHEDULED, SENT, FAILED, CANCELLED
  sentAt           DateTime? @map("sent_at")
  errorMessage     String?   @map("error_message")
  createdAt        DateTime  @default(now()) @map("created_at")

  workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  policy           Policy    @relation(fields: [policyId], references: [id], onDelete: Cascade)
  schedule         PremiumSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  template         ReminderTemplate? @relation(fields: [templateId], references: [id])

  @@index([workspaceId])
  @@index([reminderDate])
  @@index([status])
  @@map("premium_reminders")
}

model PolicyRider {
  id               String    @id @default(uuid())
  policyId         String    @map("policy_id")
  riderName        String    @map("rider_name")
  riderType        String?   @map("rider_type")
  sumAssured       Decimal?  @map("sum_assured")
  annualPremium    Decimal?  @map("annual_premium")
  commencementDate DateTime? @map("commencement_date")
  maturityDate     DateTime? @map("maturity_date")
  status           String    @default("ACTIVE")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  policy           Policy    @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@index([policyId])
  @@map("policy_riders")
}

model PremiumCalculation {
  id               String    @id @default(uuid())
  policyId         String    @map("policy_id")
  calculationDate  DateTime  @map("calculation_date")
  basePremium      Decimal   @map("base_premium")
  riderPremiums    Decimal?  @map("rider_premiums") @default(0)
  serviceTax       Decimal?  @map("service_tax") @default(0)
  totalPremium     Decimal   @map("total_premium")
  calculationMethod String? @map("calculation_method")
  calculatedByUserId String? @map("calculated_by_user_id")
  createdAt        DateTime  @default(now()) @map("created_at")

  policy           Policy    @relation(fields: [policyId], references: [id], onDelete: Cascade)
  calculatedBy     User?     @relation("CalculatedPremiums", fields: [calculatedByUserId], references: [id])

  @@index([policyId])
  @@map("premium_calculations")
}

model UserLocation {
  id               String    @id @default(uuid())
  userId           String    @map("user_id")
  workspaceId      String    @map("workspace_id")
  latitude         Decimal   @db.Decimal(10, 8)
  longitude        Decimal   @db.Decimal(11, 8)
  accuracy         Decimal?  @db.Decimal(8, 2)
  address          String?
  ipAddress        String?   @map("ip_address")
  userAgent        String?   @map("user_agent")
  locationSource   String    @default("login") @map("location_source")
  distanceFromOffice Decimal? @db.Decimal(8, 2) @map("distance_from_office")
  createdAt        DateTime  @default(now()) @map("created_at")

  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([workspaceId])
  @@index([createdAt])
  @@index([locationSource])
  @@map("user_locations")
}

model WorkspaceAsset {
  id               String    @id @default(uuid())
  workspaceId      String    @map("workspace_id")
  assetType        String    @map("asset_type") // 'logo', 'letterhead', 'signature', 'certificate', 'other'
  fileName         String    @map("file_name")
  fileUrl          String    @map("file_url")
  fileSize         Int?      @map("file_size")
  mimeType         String?   @map("mime_type")
  cloudinaryPublicId String? @map("cloudinary_public_id")
  uploadedByUserId String?   @map("uploaded_by_user_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  uploadedByUser   User?     @relation("UploadedAssets", fields: [uploadedByUserId], references: [id])

  @@index([workspaceId])
  @@index([assetType])
  @@map("workspace_assets")
}